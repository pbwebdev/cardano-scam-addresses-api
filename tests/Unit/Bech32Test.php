<?php

namespace Tests\Unit;

use App\Bech32;
use PHPUnit\Framework\TestCase;

class Bech32Test extends TestCase
{
    private $bech32;

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->bech32 = new Bech32();
    }

    protected function isValid($expected, $actual): void
    {
        $this->assertIsArray($actual);
        $this->assertArrayHasKey('hrp', $actual);
        $this->assertArrayHasKey('data', $actual);
        $this->assertEquals($expected, $actual);
    }

    public function test_string_is_valid_address(): void
    {
        $decoded = $this->bech32->decode(
            'addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz'
        );

        $this->isValid([
            'hrp'  => 'addr',
            'data' => [
                0  => '0',
                1  => '6',
                2  => '0',
                3  => '16',
                4  => '20',
                5  => '5',
                6  => '31',
                7  => '1',
                8  => '23',
                9  => '8',
                10 => '7',
                11 => '8',
                12 => '26',
                13 => '0',
                14 => '19',
                15 => '13',
                16 => '25',
                17 => '31',
                18 => '0',
                19 => '7',
                20 => '6',
                21 => '14',
                22 => '0',
                23 => '19',
                24 => '26',
                25 => '15',
                26 => '29',
                27 => '8',
                28 => '17',
                29 => '29',
                30 => '25',
                31 => '4',
                32 => '9',
                33 => '24',
                34 => '1',
                35 => '17',
                36 => '17',
                37 => '24',
                38 => '10',
                39 => '22',
                40 => '13',
                41 => '1',
                42 => '21',
                43 => '26',
                44 => '29',
                45 => '15',
                46 => '5',
                47 => '3',
                48 => '25',
                49 => '20',
                50 => '13',
                51 => '9',
                52 => '17',
                53 => '1',
                54 => '2',
                55 => '14',
                56 => '14',
                57 => '27',
                58 => '4',
                59 => '0',
                60 => '5',
                61 => '21',
                62 => '26',
                63 => '29',
                64 => '6',
                65 => '9',
                66 => '24',
                67 => '25',
                68 => '18',
                69 => '4',
                70 => '20',
                71 => '19',
                72 => '21',
                73 => '6',
                74 => '15',
                75 => '4',
                76 => '5',
                77 => '5',
                78 => '14',
                79 => '0',
                80 => '1',
                81 => '8',
                82 => '11',
                83 => '1',
                84 => '10',
                85 => '8',
                86 => '13',
                87 => '15',
                88 => '22',
                89 => '15',
                90 => '5',
                91 => '0',
            ],
        ], $decoded);
    }

    public function test_string_is_valid_address_test(): void
    {
        $decoded = $this->bech32->decode(
            'addr_test1qzkdy4x3kld2hfjd7pvalt6tfm78rsw4tz36ukf939v7mf5qqzpp4up8zk9lrmklxqf0t3rvmhcru7elu5jk2h8rmltqp9a98z'
        );

        $this->isValid([
            'hrp'  => 'addr_test',
            'data' => [
                0  => '0',
                1  => '2',
                2  => '22',
                3  => '13',
                4  => '4',
                5  => '21',
                6  => '6',
                7  => '17',
                8  => '22',
                9  => '31',
                10 => '13',
                11 => '10',
                12 => '23',
                13 => '9',
                14 => '18',
                15 => '13',
                16 => '30',
                17 => '1',
                18 => '12',
                19 => '29',
                20 => '31',
                21 => '11',
                22 => '26',
                23 => '11',
                24 => '9',
                25 => '27',
                26 => '30',
                27 => '7',
                28 => '3',
                29 => '16',
                30 => '14',
                31 => '21',
                32 => '11',
                33 => '2',
                34 => '17',
                35 => '26',
                36 => '28',
                37 => '22',
                38 => '9',
                39 => '5',
                40 => '17',
                41 => '5',
                42 => '12',
                43 => '30',
                44 => '27',
                45 => '9',
                46 => '20',
                47 => '0',
                48 => '0',
                49 => '2',
                50 => '1',
                51 => '1',
                52 => '21',
                53 => '28',
                54 => '1',
                55 => '7',
                56 => '2',
                57 => '22',
                58 => '5',
                59 => '31',
                60 => '3',
                61 => '27',
                62 => '22',
                63 => '31',
                64 => '6',
                65 => '0',
                66 => '9',
                67 => '15',
                68 => '11',
                69 => '17',
                70 => '3',
                71 => '12',
                72 => '27',
                73 => '23',
                74 => '24',
                75 => '3',
                76 => '28',
                77 => '30',
                78 => '25',
                79 => '31',
                80 => '28',
                81 => '20',
                82 => '18',
                83 => '22',
                84 => '10',
                85 => '23',
                86 => '7',
                87 => '3',
                88 => '27',
                89 => '31',
                90 => '11',
                91 => '0',
            ],
        ], $decoded);
    }

    public function test_string_is_valid_address_stake(): void
    {
        $decoded = $this->bech32->decode(
            'stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc'
        );

        $this->isValid([
            'hrp'  => 'stake',
            'data' => [
                0  => '28',
                1  => '5',
                2  => '4',
                3  => '31',
                4  => '2',
                5  => '16',
                6  => '8',
                7  => '6',
                8  => '29',
                9  => '29',
                10 => '26',
                11 => '6',
                12 => '24',
                13 => '11',
                14 => '9',
                15 => '21',
                16 => '18',
                17 => '28',
                18 => '28',
                19 => '1',
                20 => '26',
                21 => '7',
                22 => '10',
                23 => '29',
                24 => '3',
                25 => '17',
                26 => '18',
                27 => '28',
                28 => '18',
                29 => '7',
                30 => '20',
                31 => '19',
                32 => '7',
                33 => '11',
                34 => '6',
                35 => '17',
                36 => '23',
                37 => '11',
                38 => '23',
                39 => '19',
                40 => '31',
                41 => '18',
                42 => '8',
                43 => '21',
                44 => '30',
                45 => '2',
                46 => '24',
            ],
        ], $decoded);
    }

    public function test_string_is_invalid(): void
    {
        $decoded = $this->bech32->decode(
            'addr_test14x3kld276tfm78rsw4tz36ukf939v7mf54up8zk9f0t37elu5jk2h89a98z'
        );

        $this->assertNull($decoded);
    }
}
